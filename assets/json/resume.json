{
  "basics": {
    "name": "Armin Ziaei",
    "label": "Senior MLOps Engineer",
    "image": "",
    "email": "armin.ziaei.tech@gmail.com",
    "phone": "(650) 620-0912",
    "url": "https://armixz.github.io/",
    "summary": "Senior MLOps Engineer specializing in Kubernetes infrastructure, CI/CD pipelines, and enterprise-scale cloud solutions. Computer Science graduate from UT Dallas with expertise in machine learning operations, distributed systems, and production software engineering.",
    "location": {
      "address": "",
      "postalCode": "CA 94401",
      "city": "San Mateo",
      "countryCode": "US",
      "region": "California"
    },
    "profiles": [
      {
        "network": "GitHub",
        "username": "armixz",
        "url": "https://github.com/armixz"
      },
      {
        "network": "LinkedIn",
        "username": "armin-ziaei-9594748b",
        "url": "https://linkedin.com/in/armin-ziaei-9594748b"
      }
    ]
  },
  "work": [
    {
      "name": "Aktus AI",
      "position": "Senior MLOps Engineer",
      "url": "https://aktus.ai",
      "startDate": "2025-03-01",
      "endDate": "",
      "summary": "Enterprise Kubernetes Infrastructure . Marketplace Deployment Solutions . CI/CD Pipeline Engineering",
      "highlights": ["MLOps", "Kubernetes", "Infrastructure", "GPU Workloads", "Auto-scaling"]
    },
    {
      "name": "Aktus AI",
      "position": "MLOps Engineer Intern",
      "url": "https://aktus.ai",
      "startDate": "2024-08-01",
      "endDate": "2025-03-01",
      "summary": "Production RAG Systems . Microservices Architecture . CI/CD Automation . Google Cloud Platform",
      "highlights": ["MLOps", "RAG Systems", "GCP", "Helm Charts", "GitHub Actions"]
    },
    {
      "name": "HHAeXchange",
      "position": "Cloud Operations Engineer",
      "url": "https://hhaexchange.com",
      "startDate": "2024-01-01",
      "endDate": "2025-02-01",
      "summary": "Backup & Disaster Recovery . Healthcare Data Protection . Automation Workflows . HIPAA Compliance",
      "highlights": ["CloudOps", "Disaster Recovery", "Healthcare Compliance", "Python Automation", "500TB+ Data"]
    },
    {
      "name": "HHAeXchange",
      "position": "System Management and Response",
      "url": "https://hhaexchange.com",
      "startDate": "2023-01-01",
      "endDate": "2023-12-31",
      "summary": "Incident Response Management . Alert Processing . SLA Compliance . Real-time Monitoring",
      "highlights": ["Incident Management", "300+ Daily Alerts", "99.8% SLA", "MTTR Reduction", "Escalation Workflows"]
    },
    {
      "name": "HHAeXchange",
      "position": "System Operations Engineer",
      "url": "https://hhaexchange.com",
      "startDate": "2022-01-01",
      "endDate": "2022-12-31",
      "summary": "Monitoring Solutions . Datadog Implementation . Technical Training . Operational Procedures",
      "highlights": ["Monitoring", "Datadog", "Training Programs", "Custom Dashboards", "Team Leadership"]
    },
    {
      "name": "HHAeXchange",
      "position": "System Operations Engineer Intern",
      "url": "https://hhaexchange.com",
      "startDate": "2021-04-01",
      "endDate": "2021-12-31",
      "summary": "Production Architecture Monitoring . Root Cause Analysis . Performance Optimization . System Stability",
      "highlights": ["System Monitoring", "Root Cause Analysis", "Performance Optimization", "Production Support"]
    }
  ],
  "education": [
    {
      "institution": "The University of Texas at Dallas",
      "location": "Texas, USA",
      "url": "https://www.utdallas.edu/",
      "area": "Computer Science",
      "studyType": "BS",
      "startDate": "2018",
      "endDate": "2022",
      "score": "3.86",
      "courses": [
        "Discrete Mathematics for Computing",
        "Computer Architecture",
        "Probability and Statistics in Computer Science",
        "Data Structures and Introduction to Algorithmic Analysis",
        "Systems Programming in UNIX",
        "Digital Logic and Computer Design",
        "Database Systems",
        "Operating Systems Concepts",
        "Advanced Algorithm Design and Analysis",
        "Automata Theory",
        "Artificial Intelligence",
        "Introduction to Machine Learning",
        "Compiler Design",
        "Data and Applications Security",
        "Computer and Network Security",
        "Introduction to VLSI Design"
    ]    
    },
    {
      "institution": "Collin College",
      "location": "Texas, USA",
      "url": "https://www.collin.edu/",
      "area": "Computer Science",
      "studyType": "AS",
      "startDate": "2015",
      "endDate": "2017",
      "score": "4.0",
      "courses": [
        "Calculus",
        "Discrete Mathematics for Computing",
        "Programming Fundamentals",
        "University Physics"]
    }
  ],
  "certificates": [
    {
      "name": "Datadog Fundamentals",
      "date": "2024",
      "issuer": "Datadog",
      "url": "https://test-takers.psiexams.com/datadog/test/HRX6U8LD",
      "icon": "fa-solid fa-location-dot"
    },
    {
      "name": "Linux LPIC-1",
      "date": "2015",
      "issuer": "Linux Professional Institute",
      "url": "https://www.lpi.org/our-certifications/lpic-1-overview/",
      "icon": "fa-solid fa-tag"
    }
  ],
  "publications": [
    {
      "name": "Comparative Study of Decision Tree, AdaBoost, Random Forest, Na√Øve Bayes, KNN, and Perceptron for Heart Disease Prediction",
      "publisher": "IEEE",
      "releaseDate": "2023-05-08",
      "url": "https://ieeexplore.ieee.org/document/10115189",
      "summary": "Globally, cardiovascular diseases (CVD) are estimated to account for more than 32% of all deaths. Consequently, CVD has become a global health problem, and timely diagnosis is essential (WHO, 2021). Screening for risk factors accelerates the diagnosis and management of CVD, resulting in a more effective and rapid response, reducing the risk of death. This article compares six classification models, AdaBoost, Random Forest, Decision Tree, KNN, Naive Bayes, and Perceptron, to predict CVD symptoms."
    },
    {
      "name": "A Comparative Analysis of the Machine Learning Methods for Predicting Diabetes",
      "publisher": "Journal of Operations Intelligence",
      "releaseDate": "2024-05-18",
      "url": "https://jopi-journal.org/index.php/jopi/article/view/21",
      "summary": "Diabetes can lead to various health problems and complications, such as cardiovascular disease, kidney damage (nephropathy), eye issues, neuropathy, and foot ailments. In this study, we compare the performance of nine machine-learning classification models in predicting diabetes."
    },
    {
      "name": "A Comparison of Methods for Predicting Heart Disease: Neural Network, XGBoost, Gradient Boost, Logistic Regression, and SVM",
      "publisher": "Under Review",
      "releaseDate": "2024",
      "url": "",
      "summary": "A comprehensive comparative study of machine learning methods for heart disease prediction, analyzing the performance of neural networks, ensemble methods, and traditional statistical approaches to improve cardiovascular disease diagnosis."
    }
  ],
  "skills": [
    {
      "name": "Cloud & Infrastructure",
      "level": "Master",
      "icon": "fa-solid fa-cloud",
      "keywords": [
        "AWS",
        "GCP", 
        "Azure",
        "Kubernetes",
        "Ansible",
        "Kafka",
        "RabbitMQ",
        "SQS",
        "AWS CloudFormation",
        "GCP Deployment Manager"
      ]
    },
    {
      "name": "Development & Programming",
      "level": "Master",
      "icon": "fa-solid fa-code",
      "keywords": [
        "Python",
        "C/C++",
        "Kubeflow",
        "MLflow",
        "Weights & Biases",
        "Pinecone",
        "Qdrant",
        "Verilog/VHDL",
        "Prolog Logic",
        "Database Design"
      ]
    },
    {
      "name": "DevOps & Monitoring",
      "level": "Master",
      "icon": "fa-solid fa-gear",
      "keywords": [
        "Git",
        "Terraform",
        "Helm",
        "Docker",
        "Datadog",
        "Prometheus",
        "Grafana",
        "Linux/Unix",
        "TCP/UDP",
        "CI/CD Pipelines"
      ]
    }
  ],
  "languages": [
    {
      "language": "Farsi",
      "fluency": "Native speaker",
      "icon": ""
    },
    {
      "language": "English",
      "fluency": "Fluent",
      "icon": ""
    }
  ],
  "interests": [
    {
      "name": "Technology & Innovation",
      "icon": "fa-solid fa-microchip",
      "keywords": [
        "Cloud Technologies",
        "Machine Learning",
        "Open Source",
        "DevOps Tools",
        "Kubernetes",
        "Tech Conferences"
      ]
    },
    {
      "name": "Hardware & DIY",
      "icon": "fa-solid fa-screwdriver-wrench",
      "keywords": [
        "Flipper Zero",
        "Raspberry Pi",
        "Hardware Hacking",
        "DIY Projects",
        "Electronics",
        "Programming"
      ]
    }
  ],
  "projects": [
    {
      "name": "Enterprise Kafka Consumer Management Platform",
      "summary": "Architected scalable Kafka consumer management application using Django and Python, implementing real-time message processing orchestration with automated consumer scaling and health monitoring for distributed streaming data pipelines supporting high-throughput message consumption across multiple topics and partitions.",
      "highlights": ["Kafka", "Django", "Python", "Real-time Processing", "Distributed Systems", "Auto-scaling"],
      "startDate": "2024-01-01",
      "endDate": "2024-04-01"
    },
    {
      "name": "Big Data Monitoring Infrastructure",
      "summary": "Engineered comprehensive monitoring solution for 2M+ weekly transaction data points using Datadog and Python, implementing custom metrics collection, automated alerting systems, and performance optimization strategies that reduced monitoring costs by 35% while improving system reliability to 99.9% uptime and enabling proactive incident detection.",
      "highlights": ["Big Data", "Datadog", "Python", "Monitoring", "Cost Optimization", "99.9% Uptime"],
      "startDate": "2024-01-01",
      "endDate": "2024-04-01"
    },
    {
      "name": "Embedded Systems Calculator for Flipper Zero",
      "summary": "Developed feature-rich programmer calculator application for Flipper Zero hardware platform using C and FURI framework, implementing hexadecimal/binary/decimal conversions, bitwise operations, and memory management optimized for embedded systems with 64KB RAM constraints and real-time user interface responsiveness.",
      "highlights": ["Embedded Systems", "C Programming", "FURI Framework", "Memory Optimization", "Hardware Constraints"],
      "startDate": "2023-09-01",
      "endDate": "2023-12-01",
      "url": "https://github.com/armixz/Flipper-Zero-Programmer-Calculator"
    },
    {
      "name": "Datadog Metrics Automation Framework",
      "summary": "Led development of automated custom metrics generation system using Python and Datadog API integration, implementing database query performance monitoring, automated threshold configuration, and dynamic alerting rules that reduced manual monitoring overhead by 80% and improved database performance visibility by 90%.",
      "highlights": ["Python", "Datadog API", "Automation", "Database Monitoring", "80% Overhead Reduction"],
      "startDate": "2023-09-01",
      "endDate": "2023-12-01"
    },
    {
      "name": "Infrastructure Automation with Ansible",
      "summary": "Spearheaded enterprise-wide system update automation using Ansible playbooks, implementing zero-downtime patching strategies for 200+ servers, automated rollback mechanisms, and compliance reporting that reduced maintenance windows by 70% and eliminated manual patching errors across production environments.",
      "highlights": ["Ansible", "Infrastructure Automation", "Zero-downtime Deployment", "200+ Servers", "70% Reduction"],
      "startDate": "2023-09-01",
      "endDate": "2023-12-01"
    },
    {
      "name": "Predictive Analytics with Datadog APM",
      "summary": "Implemented machine learning forecasting system analyzing Datadog APM performance data, developing predictive models for usage pattern analysis and failure prediction using time-series analysis, anomaly detection algorithms, and automated capacity planning recommendations that improved system reliability by 45%.",
      "highlights": ["Machine Learning", "Datadog APM", "Predictive Analytics", "Time-series Analysis", "45% Reliability Improvement"],
      "startDate": "2023-03-01",
      "endDate": "2023-06-01"
    },
    {
      "name": "PowerShell Log Management Automation",
      "summary": "Developed comprehensive PowerShell automation framework for enterprise log file management and disk cleanup operations, implementing scheduled task orchestration, custom compression algorithms, and automated archival processes that reduced storage costs by 60% and eliminated manual log maintenance across 150+ Windows servers.",
      "highlights": ["PowerShell", "Automation", "Log Management", "60% Cost Reduction", "150+ Servers"],
      "startDate": "2022-09-01",
      "endDate": "2022-12-01"
    },
    {
      "name": "Machine Learning System Usage Analytics",
      "summary": "Conducted large-scale system usage analysis using Python and scikit-learn on petabyte-scale datasets, implementing clustering algorithms, predictive modeling, and performance optimization recommendations that identified 40% reduction opportunities in resource utilization and improved system efficiency metrics.",
      "highlights": ["Machine Learning", "Python", "scikit-learn", "Petabyte-scale Data", "40% Resource Optimization"],
      "startDate": "2021-09-01",
      "endDate": "2021-12-01"
    },
    {
      "name": "Multi-Platform Data Engineering Pipeline",
      "summary": "Architected comprehensive data analysis and engineering solution using Python, .NET, Shell scripting, and advanced Regex processing, implementing ETL pipelines for terabyte-scale data processing, automated data validation frameworks, and cross-platform integration that improved data processing speed by 300% and reduced manual data handling errors by 95%.",
      "highlights": ["Data Engineering", "Python", ".NET", "ETL Pipelines", "300% Speed Improvement", "95% Error Reduction"],
      "startDate": "2021-09-01",
      "endDate": "2021-12-01"
    },
    {
      "name": "Halo Collar Activity Recognition",
      "summary": "Engineered a GPS and sensor-based machine learning model for canine activity classification using Python and scikit-learn, achieving 89% accuracy across 8 distinct behavioral patterns and processing real-time sensor data from 500+ collar devices for the PAWS LLC partnership.",
      "highlights": ["Machine Learning", "Python", "scikit-learn", "GPS Sensors", "Data Processing"],
      "startDate": "2022-08-01",
      "endDate": "2022-12-01",
      "url": "https://github.com/armixz/Halo-Collar-Activity-Recognition"
    },
    {
      "name": "Distributed Network Communication Protocol",
      "summary": "Architected CRSP-compliant distributed system with controller, renderer, and server components using UDP socket programming in Python, implementing concurrent message processing with multithreading and multiprocessing for file streaming operations supporting pause, resume, and restart functionality across networked hosts.",
      "highlights": ["Network Programming", "Python", "UDP", "Multithreading", "Distributed Systems"],
      "startDate": "2022-08-01",
      "endDate": "2022-12-01",
      "url": "https://github.com/armixz/Protocol-Design"
    },
    {
      "name": "Production Compiler Implementation",
      "summary": "Architected a complete compiler system using Java with JFlex lexical analyzer and CUP parser generator, implementing a comprehensive grammar supporting classes, methods, arrays, expressions, and control flow statements, validated through 21 distinct test cases covering syntax analysis, semantic checking, and error handling for type safety and program correctness.",
      "highlights": ["Compiler Design", "Java", "JFlex", "CUP Parser", "Grammar Implementation"],
      "startDate": "2022-08-01",
      "endDate": "2022-12-01",
      "url": "https://github.com/armixz/Compiler-Design-II"
    },
    {
      "name": "Enterprise Task Management Platform",
      "summary": "Led development of full-stack web application using PHP, Apache, and SQL database with comprehensive Entity-Relationship modeling, implementing normalized database design supporting user authentication, task tracking, and reporting capabilities with web-based interface for enterprise task management workflows.",
      "highlights": ["Full-Stack Development", "PHP", "Apache", "SQL", "Database Design"],
      "startDate": "2022-01-01",
      "endDate": "2022-05-01",
      "url": "https://github.com/armixz/Task-Manager-Development"
    },
    {
      "name": "Operating System Process Simulator",
      "summary": "Developed multi-process computer system simulation using C/C++ with separate CPU and Memory processes communicating via Inter-Process Communication, demonstrating deep understanding of operating system concepts, including process scheduling, memory management, and low-level system programming with concurrent execution handling.",
      "highlights": ["Operating Systems", "C/C++", "IPC", "Process Scheduling", "Memory Management"],
      "startDate": "2022-01-01",
      "endDate": "2022-05-01",
      "url": "https://github.com/armixz/Computer-System-Simulation"
    },
    {
      "name": "Computer Vision Digit Classification",
      "summary": "Built production-ready handwritten digit recognition system for MNIST dataset using Python and scikit-learn, implementing image preprocessing pipelines for 28x28 pixel grayscale images, achieving 97%+ classification accuracy with comprehensive data validation and Kaggle-style competition submission format.",
      "highlights": ["Computer Vision", "Python", "scikit-learn", "MNIST", "Image Processing"],
      "startDate": "2021-08-01",
      "endDate": "2021-12-01",
      "url": "https://github.com/armixz/Digit-Recognizer"
    },
    {
      "name": "Machine Learning Algorithm Library",
      "summary": "Engineered a comprehensive ML framework implementing 12 fundamental algorithms, including Linear Regression (direct method, polynomial, SGD), K-Means clustering, PCA with eigenface analysis, K-Nearest Neighbors on the MNIST dataset, Logistic Regression, and Decision Trees, with performance benchmarking across multiple datasets and automated hyperparameter optimization.",
      "highlights": ["Machine Learning", "Python", "Algorithm Implementation", "Performance Benchmarking"],
      "startDate": "2021-08-01",
      "endDate": "2021-12-01",
      "url": "https://github.com/armixz/Machine-Learning-Theory"
    },
    {
      "name": "Prolog Knowledge Representation System",
      "summary": "Developed an enterprise-grade question-answering system using Prolog with a first-order logic implementation, featuring a comprehensive knowledge base containing 50+ facts and 20+ inference rules, supporting complex logical reasoning queries with 95% accuracy for domain-specific questions about retail transactions and inventory management.",
      "highlights": ["AI Programming", "Prolog", "Knowledge Representation", "Logic Programming", "Question Answering"],
      "startDate": "2021-08-01",
      "endDate": "2021-12-01",
      "url": "https://github.com/armixz/AI-Knowledge-Representation"
    },
    {
      "name": "Multi-Algorithm AI Search Engine",
      "summary": "Implemented sophisticated 8-puzzle solver using four distinct search algorithms, including Depth-First Search, Iterative Deepening Search, and A* search with Manhattan distance and misplaced tile heuristics, achieving optimal solutions with a command-line interface and file-based input processing for automated testing and performance comparison.",
      "highlights": ["Artificial Intelligence", "Search Algorithms", "A* Search", "Heuristics", "Problem Solving"],
      "startDate": "2021-08-01",
      "endDate": "2021-12-01",
      "url": "https://github.com/armixz/8-Puzzle-Solver"
    },
    {
      "name": "32-Bit ALU Hardware Architecture",
      "summary": "Designed a comprehensive 32-bit Arithmetic Logic Unit supporting 16 operations using Verilog HDL, implementing complex multiplexer architecture with error detection for overflow and divide-by-zero conditions, sequential logic components including accumulator register and flip-flops, and a comprehensive test bench validation, achieving timing requirements for 100MHz operation.",
      "highlights": ["Digital Systems", "Verilog HDL", "Hardware Design", "ALU Architecture", "Test Bench"],
      "startDate": "2020-08-01",
      "endDate": "2020-12-01",
      "url": "https://github.com/armixz/ALU-Design-and-Development"
    },
    {
      "name": "Multi-Protocol Network Chat System",
      "summary": "Engineered real-time communication system supporting both TCP and UDP protocols in a Unix environment using C/C++ and Python, implementing client-server architecture with concurrent connection handling, demonstrating network programming expertise and understanding of protocol-level communication differences.",
      "highlights": ["Network Programming", "TCP/UDP", "C/C++", "Python", "Client-Server Architecture"],
      "startDate": "2019-01-01",
      "endDate": "2019-05-01",
      "url": "https://github.com/armixz/Chat-System-Development"
    },
    {
      "name": "Custom Shell Command Processor",
      "summary": "Developed a comprehensive Bash command-line interface application in a Unix environment using shell scripting and system programming, implementing custom command parsing, input validation, and process management capabilities. The application enhanced system interaction efficiency by streamlining command processing, automating task execution, and improving the user experience for routine administrative operations.",
      "highlights": ["Systems Programming", "Bash Scripting", "Unix", "Command Processing", "Process Management"],
      "startDate": "2018-08-01",
      "endDate": "2018-12-01",
      "url": "https://github.com/armixz/Custom-Shell-Processor"
    }
  ]
}
